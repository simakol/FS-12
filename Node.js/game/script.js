// Потрібно створити гру хрестики нулики.
// Відмалюй розмітку ігрового поля для контейнера з класом "content", для кожної клітинки застосуй клас "item"
// Реалізуй делегування подій на ігровому полі для можливості ходу.
// Скріпт має самостійно визначати переможця гри та виводити модальне вікно з переможцем (X/O)
// Для історії ходів наших гравців (Х/О) потрібно щоб кожна клітинка ігрового поля містила дата атрибут id
// Створи скріпт для перевірки виграшної комбінації, список всіх можливих виграшних комбінацій знаходиться в масиві combination.
// Для виводу модального вікна застосуй бібліотеку basiclightbox
// Після визначення переможця обов'язково підготуй ігрове поле для наступної гри

/*
 * 1. створити два масиви для зберігання історії кожного гравця (Х О), задати поточного гравця через змінну
 * 2. повісити слухач(обробник) поджій по кліку на батьківський елемент (content)
 *   2.1. робимо вихід із функції обробника якщо клікнули за межі поля (не на клітинку), або якщо клітинка зайнята + створюємо змінну winner для переможця і ініціалізуємо її зі значенням false
 *   2.2. перевірка з яким гравцем я зараз взаємодію (зберігається в змінній)
 *   Якщо Х:
 *       2.2.1. додаємо айді поточної клітинки в історію ходів Х (методом .push())
 *       2.2.2. робимо перевірку на перемогу (якщо кількість ходів більша або рівна 3, то перевіряємо що в масиві виграшних комбінацій є хоча б одна комбінація всі індекси якої співпадають з моєю історією ходів)
 *   Якщо О:
 *       2.2.3. додаємо айді поточної клітинки в історію ходів O (методом .push())
 *       2.2.4. робимо перевірку на перемогу (якщо кількість ходів більша або рівна 3, то перевіряємо що в масиві виграшних комбінацій є хоча б одна комбінація всі індекси якої співпадають з моєю історією ходів)
 *   2.3. якщо winner === true - то показуємо повідомлення про кінець гри і очищаємо поле для наступної гри + якщо winner === false І всі клітинки вже зайняті (якщо сума довжин масивів історій === 9) - то повідоплення про нічию на очищення поля для наступної гри
 *   2.4. задати контент (Х О) для клітинки та змінити гравця
 */

const combination = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [1, 4, 7],
  [2, 5, 8],
  [1, 5, 9],
  [3, 5, 7],
  [3, 6, 9],
];

// масиви для зберігання історії ходів для гравців
const historyX = [];
const historyO = [];
// поточний гравець
let player = "X";

const content = document.getElementById("content");

createMarkup();

content.addEventListener("click", handleClick); // вішаємо обробник подій по кліку на батьківський контейнер

function handleClick() {
  console.log("Clicked!");
}

function createMarkup() {
  let markup = ""; // створюємо змінну для накопичення розмітки
  for (let i = 1; i <= 9; i += 1) {
    // запускаємо цикл на 9 ітерацій щоб створити 9 клітинок для гри
    markup += `<div class="item" data-id="${i}"></div>`; // створюємо розмітку однієї клітинки, додаючи їй унікальне id, і накопичуємо її в зміннку markup
  }
  content.innerHTML = markup; // замість того, що було всередині контейнеру content, вставляємо нашу нову розмітку
}
